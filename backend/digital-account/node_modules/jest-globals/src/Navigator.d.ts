export declare const createMockNavigator: () => {
    clipboard: {
        read: jest.Mock<Promise<ClipboardItems>, []>;
        readText: jest.Mock<Promise<string>, []>;
        write: jest.Mock<Promise<void>, [data: ClipboardItems]>;
        writeText: jest.Mock<Promise<void>, [data: string]>;
    };
    userAgent: string | undefined;
    serviceWorker: {
        controller?: ServiceWorker | null | undefined;
        oncontrollerchange?: ((this: ServiceWorkerContainer, ev: Event) => any) | null | undefined;
        onmessage?: ((this: ServiceWorkerContainer, ev: MessageEvent<any>) => any) | null | undefined;
        onmessageerror?: ((this: ServiceWorkerContainer, ev: MessageEvent<any>) => any) | null | undefined;
        ready?: Promise<ServiceWorkerRegistration> | undefined;
        getRegistration: ((clientURL?: string | URL | undefined) => Promise<ServiceWorkerRegistration | undefined>) | jest.Mock<Promise<ServiceWorkerRegistration | undefined>, [clientURL?: string | URL | undefined]>;
        getRegistrations: (() => Promise<readonly ServiceWorkerRegistration[]>) | jest.Mock<Promise<readonly ServiceWorkerRegistration[]>, []>;
        register: ((scriptURL: string | URL, options?: RegistrationOptions | undefined) => Promise<ServiceWorkerRegistration>) | jest.Mock<Promise<ServiceWorkerRegistration>, [scriptURL: string | URL, options?: RegistrationOptions | undefined]>;
        startMessages: (() => void) | jest.Mock<void, []>;
        addEventListener: {
            <K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
        } | jest.Mock<void, [type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined]>;
        removeEventListener: {
            <K_1 extends keyof ServiceWorkerContainerEventMap>(type: K_1, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K_1]) => any, options?: boolean | EventListenerOptions | undefined): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
        } | jest.Mock<void, [type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined]>;
        dispatchEvent?: ((event: Event) => boolean) | undefined;
    } | undefined;
    platform: string;
    sendBeacon: jest.Mock<boolean, [url: string | URL, data?: BodyInit | null | undefined]>;
};
export declare type MockNavigator = ReturnType<typeof createMockNavigator>;
