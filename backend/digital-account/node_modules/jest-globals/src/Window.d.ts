/// <reference types="node" />
/// <reference types="jest" />
import { MockLocation } from "./Location";
import { Mock } from "./mocks";
import { MockNavigator } from "./Navigator";
import { MockPerformance } from "./Performance";
import { MockStorage } from "./Storage";
export interface MockWindowMembers {
    addEventListener: Mock<typeof addEventListener>;
    alert: Mock<typeof alert>;
    blur: Mock<typeof blur>;
    close: Mock<typeof close>;
    confirm: Mock<typeof confirm>;
    dispatchEvent: Mock<typeof dispatchEvent>;
    focus: Mock<typeof focus>;
    getSelection: Mock<typeof getSelection>;
    localStorage: MockStorage;
    location: MockLocation;
    matchMedia: Mock<typeof matchMedia>;
    moveBy: Mock<typeof moveBy>;
    navigator: MockNavigator;
    open: Mock<typeof open>;
    performance: MockPerformance;
    postMessage: Mock<typeof postMessage>;
    print: Mock<typeof print>;
    prompt: Mock<typeof prompt>;
    removeEventListener: Mock<typeof removeEventListener>;
    requestAnimationFrame: Mock<typeof requestAnimationFrame>;
    requestIdleCallback: Mock<typeof requestIdleCallback>;
    resizeBy: Mock<typeof resizeBy>;
    resizeTo: Mock<typeof resizeTo>;
    scrollBy: Mock<typeof scrollBy>;
    scrollTo: Mock<typeof scrollTo>;
    sessionStorage: MockStorage;
    setImmediate: Mock<typeof setImmediate>;
    stop: Mock<typeof stop>;
    top: MockWindowMembers;
}
export declare class MockWindow implements MockWindowMembers {
    addEventListener: jest.Mock<void, [type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined]>;
    alert: jest.Mock<void, [message?: any]>;
    blur: jest.Mock<void, []>;
    close: jest.Mock<void, []>;
    confirm: jest.Mock<boolean, [message?: string | undefined]>;
    dispatchEvent: jest.Mock<boolean, [event: Event]>;
    focus: jest.Mock<void, []>;
    getSelection: jest.Mock<Selection | null, []>;
    localStorage: MockStorage;
    location: {
        assign: jest.Mock<void, [url: any]>;
        hash: string;
        href: string;
        host: string;
        origin: string;
        pathname: string;
        search: string;
        reload: jest.Mock<void, []>;
    };
    matchMedia: jest.Mock<MediaQueryList, [query: string]>;
    moveBy: jest.Mock<void, [x: number, y: number]>;
    navigator: {
        clipboard: {
            read: jest.Mock<Promise<ClipboardItems>, []>;
            readText: jest.Mock<Promise<string>, []>;
            write: jest.Mock<Promise<void>, [data: ClipboardItems]>;
            writeText: jest.Mock<Promise<void>, [data: string]>;
        };
        userAgent: string | undefined;
        serviceWorker: {
            controller?: ServiceWorker | null | undefined;
            oncontrollerchange?: ((this: ServiceWorkerContainer, ev: Event) => any) | null | undefined;
            onmessage?: ((this: ServiceWorkerContainer, ev: MessageEvent<any>) => any) | null | undefined;
            onmessageerror?: ((this: ServiceWorkerContainer, ev: MessageEvent<any>) => any) | null | undefined;
            ready?: Promise<ServiceWorkerRegistration> | undefined;
            getRegistration: ((clientURL?: string | URL | undefined) => Promise<ServiceWorkerRegistration | undefined>) | jest.Mock<Promise<ServiceWorkerRegistration | undefined>, [clientURL?: string | URL | undefined]>;
            getRegistrations: (() => Promise<readonly ServiceWorkerRegistration[]>) | jest.Mock<Promise<readonly ServiceWorkerRegistration[]>, []>;
            register: ((scriptURL: string | URL, options?: RegistrationOptions | undefined) => Promise<ServiceWorkerRegistration>) | jest.Mock<Promise<ServiceWorkerRegistration>, [scriptURL: string | URL, options?: RegistrationOptions | undefined]>;
            startMessages: (() => void) | jest.Mock<void, []>;
            addEventListener: {
                <K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
                (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
            } | jest.Mock<void, [type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined]>;
            removeEventListener: {
                <K_1 extends keyof ServiceWorkerContainerEventMap>(type: K_1, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K_1]) => any, options?: boolean | EventListenerOptions | undefined): void;
                (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
            } | jest.Mock<void, [type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined]>;
            dispatchEvent?: ((event: Event) => boolean) | undefined;
        } | undefined;
        platform: string;
        sendBeacon: jest.Mock<boolean, [url: string | URL, data?: BodyInit | null | undefined]>;
    };
    open: jest.Mock<Window | null, [url?: string | URL | undefined, target?: string | undefined, features?: string | undefined]>;
    performance: {
        clearMarks: jest.Mock<void, [markName?: string | undefined]>;
        clearMeasures: jest.Mock<void, [measureName?: string | undefined]>;
        clearResourceTimings: jest.Mock<void, []>;
        getEntries: jest.Mock<PerformanceEntryList, []>;
        getEntriesByName: jest.Mock<PerformanceEntryList, [name: string, type?: string | undefined]>;
        getEntriesByType: jest.Mock<PerformanceEntryList, [type: string]>;
        mark: jest.Mock<PerformanceMark, [markName: string, markOptions?: PerformanceMarkOptions | undefined]>;
        measure: jest.Mock<PerformanceMeasure, [measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined]>;
        now: jest.Mock<number, []>;
        setResourceTimingBufferSize: jest.Mock<void, [maxSize: number]>;
        toJSON: jest.Mock<any, []>;
    };
    postMessage: jest.Mock<void, [message: any, options?: WindowPostMessageOptions | undefined]>;
    print: jest.Mock<void, []>;
    prompt: jest.Mock<string | null, [message?: string | undefined, _default?: string | undefined]>;
    removeEventListener: jest.Mock<void, [type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined]>;
    requestAnimationFrame: jest.Mock<number, [callback: FrameRequestCallback]>;
    requestIdleCallback: jest.Mock<number, [callback: IdleRequestCallback, options?: IdleRequestOptions | undefined]>;
    resizeBy: jest.Mock<void, [x: number, y: number]>;
    resizeTo: jest.Mock<void, [width: number, height: number]>;
    scrollBy: jest.Mock<void, [x: number, y: number]>;
    scrollTo: jest.Mock<void, [x: number, y: number]>;
    sessionStorage: MockStorage;
    setImmediate: jest.Mock<NodeJS.Immediate, [callback: (...args: any[]) => void, ...args: any[]]>;
    stop: jest.Mock<void, []>;
    top: MockWindow;
    constructor(settings?: Partial<MockWindowMembers>);
}
